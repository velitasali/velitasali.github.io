<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>veli++</title>
    <description>A weapon as powerful as a towel
</description>
    <link>http://velitasali.github.io/</link>
    <atom:link href="http://velitasali.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 23 Mar 2019 16:17:02 +0300</pubDate>
    <lastBuildDate>Sat, 23 Mar 2019 16:17:02 +0300</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Readability with Scopes</title>
        <description>&lt;p&gt;Most programmers do think that their style of coding is superior when they develop small projects and they sometimes find themselves staring at the code that they wrote earlier, admiring the way it looks and works until they find out that it is not simply the best nor the most readable one. Readability is an important part of software development and it becomes more important as the number of people involving grows. Even at times the developer who wrote the code may not recognize or understand. This is either because he already has changed the way architects his software or because he/she is a messy programmer. Well, there are ways to improve the kind of situations by simply adopting some traits. Commenting, documenting aside, there are the ones that changes the way the code is read like wrapping, spacing etc. I will not talk about them. I will talk about what I call &lt;code class=&quot;highlighter-rouge&quot;&gt;scoping&lt;/code&gt;. I can’t really say this is the best way referring to it, but when you are done reading this post, hopefully you will understand. I discovered this one year ago and I consider it one of the most helpful way of stating the way your software works. I have never seen or heard someone mentioning them in software development, and probably you haven’t either. So let’s go.&lt;/p&gt;

&lt;p&gt;You know when you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; condition with multiple lines of code and working with Java or C++, you use braces that is &lt;code class=&quot;highlighter-rouge&quot;&gt;{&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt; to tell program where it should do tricky task and where it should end it. What if I tell you, braces can always be used even though they do not have any keyword before them like &lt;code class=&quot;highlighter-rouge&quot;&gt;do&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;try&lt;/code&gt; etc. And using them certainly have an effect with a powerful IDE, and mostly a language like C++.&lt;/p&gt;

&lt;p&gt;Look here where I connect to server. This is a client that should connect two separate servers to do its tasks.&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;communicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;communicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//todo: catch errors
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, there two different pointers with the same name, but neither compiler nor you powerful IDE will confuse them because they are in different scope. This code throws an exception when any of the two connections fails, so nothing breaks the code.&lt;/p&gt;

&lt;p&gt;You may say “why would I need this?” Simple! This will save you from using a lot of variables mistakenly and when you use temporary objects, they will be cleaned when they are created in these headless braces.&lt;/p&gt;

&lt;p&gt;Like this;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TmpObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TmpObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;TmpObject deleted&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TmpObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Main scope&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output is;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TmpObject deleted
Main scope
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we didn’t call &lt;code class=&quot;highlighter-rouge&quot;&gt;TmpObject();&lt;/code&gt; in those headless braces the first output for this program would be &lt;code class=&quot;highlighter-rouge&quot;&gt;Main scope&lt;/code&gt; and then &lt;code class=&quot;highlighter-rouge&quot;&gt;TmpObject deleted&lt;/code&gt; which means &lt;code class=&quot;highlighter-rouge&quot;&gt;TmpObject&lt;/code&gt; is deleted after the function exits. However, in the example above, we get rid of not used objects faster and clean mess earlier.&lt;/p&gt;

&lt;p&gt;For me, using this was a time saver, since in a server-client structure, there are too many variables to handle and it is hard to remember what they are used for.&lt;/p&gt;

&lt;p&gt;Check &lt;a href=&quot;https://github.com/genonbeta/TrebleShot-Desktop/blob/84902b3d889b85c9d45439e58b6c78d108f9a603/src/broadcast/SeamlessClient.cpp#L125&quot;&gt;SeamlessClient&lt;/a&gt; and
&lt;a href=&quot;https://github.com/genonbeta/TrebleShot/blob/55175f432fd5df6eee7d9b1c3ced4efc84927aed/app/src/main/java/com/genonbeta/TrebleShot/service/CommunicationService.java#L988&quot;&gt;SeamlessServer&lt;/a&gt; out. One is C++ and the other is Java and they work together.&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Mar 2019 10:00:00 +0300</pubDate>
        <link>http://velitasali.github.io/coding-style/2019/03/23/readability-with-psuedo-scopes.html</link>
        <guid isPermaLink="true">http://velitasali.github.io/coding-style/2019/03/23/readability-with-psuedo-scopes.html</guid>
        
        
        <category>coding-style</category>
        
      </item>
    
      <item>
        <title>An Uninformed Design Choice</title>
        <description>&lt;p&gt;The most discouraging part of the software development is that not knowing that there is already the wheel that you are inventing. However if you can justify your wheel with some features that no other wheel has then maybe there is hope. Yet sometimes the very feature you are building your wheel upon can easily be done with some tools that already existed before you and does the task well while going with your implementation requires some informed choices like sustainability or usability or dependability.&lt;/p&gt;

&lt;p&gt;My stance on this was simply to write an entire TCP server and its client both on Java and C++ with Qt5 framework. It is, of course, easy to use and for the source belongs to me, I do any change that eases the development process. Multiple tasks can be carried out simultaneously and so on. And it is always easy to write this than use somebody else’s base. Still though the server did never do the byte transferring task and the child tasks depend on the parent task to maintain the connection and their preparation. To start a receive process, the receiver has to inform the sender than the safe-checks gets done and finally the transfer begins. Yet there was always a better technology that could the tasks with more sophisticated manner and more error-proof way. That is torrenting, of course. At the time of writing and I have a bit of knowledge that helps me understand why it would be a better choice. For instance, it is UDP not TCP meaning that it does not active and packets are subject to get lost, still the task is always safe since once the packet arrives there is nothing important. Packet loss would be bad for voice communication, but this is not it. File transfer is something else. The result is the important phase not the progress. It could also help ease transfers among different devices.&lt;/p&gt;

&lt;p&gt;With that said, I am now into writing a torrent based file sharer. It would not even need per platform compatibility.  It is always good to do some research before starting a project.&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Mar 2019 10:00:00 +0300</pubDate>
        <link>http://velitasali.github.io/idea/2019/03/17/uninformed-design-choice.html</link>
        <guid isPermaLink="true">http://velitasali.github.io/idea/2019/03/17/uninformed-design-choice.html</guid>
        
        
        <category>idea</category>
        
      </item>
    
      <item>
        <title>Multiple Threads or Multiple Owners?</title>
        <description>&lt;p&gt;And again I am at the point where something works, but kinda. On TrebleShot’s &lt;em&gt;Adding more devices to a transfer&lt;/em&gt;,
everything works as long as user does not change the language, or the orientation in short recreate it, or leave
the app leaving it to the hands of LMK (Low Memory Killer). When that happens the activity that has started the thread simply loses its instance causing a new thread to spawn and the other thread to die. Other thread dies because we will not know where will it be or it will belong to us if we don’t kill it.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;getDefaultInterrupter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interrupt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getDefaultInterrupter()&lt;/code&gt; returns the class level instance of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Interrupter&lt;/code&gt; object that notifies threads to seize actions. It is a good way to handle multiple threads. It supports something called &lt;em&gt;Closers&lt;/em&gt;. It is a class that does action when the &lt;code class=&quot;highlighter-rouge&quot;&gt;interrupt()&lt;/code&gt; is called. I used this method throughout TrebleShot.&lt;/p&gt;

&lt;h1 id=&quot;show-the-right-activity-but-how&quot;&gt;Show the right activity, but how?&lt;/h1&gt;
&lt;p&gt;What I want to achieve is that when user leaves the app and clicks the notification that they can still see what they left off. It is important for consistency. Another way is loop all the tasks as it is their turn for instance&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoteTask&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mPosition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//todo: task&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mPosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So every task can be called one by one and all the tasks can run on the same thread. Of course, that is when a task can
detach itself in time, which means not doing recursive tasks and remembering the stage it was at. So, I did not like this and the idea that reorganizing the current methods (a lot of trouble if not done carefully).&lt;/p&gt;

&lt;h1 id=&quot;remembering-who-was-who&quot;&gt;Remembering who was who&lt;/h1&gt;
&lt;p&gt;When a task is started, since they are mostly done by activity which has a certain &lt;code class=&quot;highlighter-rouge&quot;&gt;android.content.Intent&lt;/code&gt; that started them then, comparing elements of them looked like a sane idea.&lt;/p&gt;

&lt;p&gt;Before starting, the task give them the intent that started the activity so by putting that &lt;code class=&quot;highlighter-rouge&quot;&gt;Intent&lt;/code&gt; into a &lt;code class=&quot;highlighter-rouge&quot;&gt;PendingIntent&lt;/code&gt;
we can start the same instance of that activity. And, we can even reattach the task when it happens.&lt;/p&gt;

&lt;p&gt;So to do that I created &lt;code class=&quot;highlighter-rouge&quot;&gt;intentHash()&lt;/code&gt; which returns a string hash for an &lt;code class=&quot;highlighter-rouge&quot;&gt;Intent&lt;/code&gt;. The method looks like this;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;intentHash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFlags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExtras&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExtras&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So &lt;code class=&quot;highlighter-rouge&quot;&gt;RunningTask&lt;/code&gt; class holds a hash code and a pending intent. We have everything ready and it is time to reattach the task. Not quite so! What if I want to show a progress bar and a button and a bunch of other informative widgets that benefits from this. They should be updated by the &lt;code class=&quot;highlighter-rouge&quot;&gt;RunningTask&lt;/code&gt; and they should definitely not crash the app when the activity dies. So to that I added something simple called &lt;em&gt;Anchors&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Anchors come and go and they are definitely not reliable. That is they may exist at times, but mostly they do not. This means that whenever a task is attached to an activity, the activity attaches a listener (mostly itself) and by using templates, the &lt;code class=&quot;highlighter-rouge&quot;&gt;RunningTask&lt;/code&gt; can always know what it will have if it can have it.&lt;/p&gt;

&lt;p&gt;So that is why the definition of the RunningTask is;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RunningTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnAttachListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterruptAwareJob&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the &lt;code class=&quot;highlighter-rouge&quot;&gt;OnAttachListener&lt;/code&gt; is;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OnAttachListener&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAttachedToTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RunningTask&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally on the activity I call &lt;code class=&quot;highlighter-rouge&quot;&gt;WorkerService.findTaskByHash()&lt;/code&gt; which returns tasks when there is any.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RunningTask&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findTaskByHash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getTaskList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RunningTask&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runningTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getTaskList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runningTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runningTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 25 Feb 2019 10:00:00 +0300</pubDate>
        <link>http://velitasali.github.io/threading/design/android/2019/02/25/multiple-threads-or-multiple-owners.html</link>
        <guid isPermaLink="true">http://velitasali.github.io/threading/design/android/2019/02/25/multiple-threads-or-multiple-owners.html</guid>
        
        
        <category>threading</category>
        
        <category>design</category>
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>Project Focus: Software that Helps Reducing Worries for Outside World</title>
        <description>&lt;p&gt;While I am doing work on my computer and phone, I try to be aware of what is going on in the outside world.
For instance, listening to music to make sure that nothing disturbs me while sleeping is a good reason to wear
headphones if you are living in a dorm, but in the mean time, it is dangerous. I have been thinking that
a software that warns me when a noise that is extra ordinary is heard would be a great. And this
software should also be capable of receiving data from IoT devices so that when my computer’s mic is not in range
to hear the noise those device can help.&lt;/p&gt;

&lt;p&gt;In home, to not disturb my family, I choose to work at night. During that time, I am
also able to use my headphone because otherwise I cannot hear when someone calls me out.&lt;/p&gt;

&lt;p&gt;How this software will carry its task is simple. It will work in the background and there will a be
indicator that the current state of the outside world is O.K. When that indicator changes in a way that
it warns there is something unusual happening, I can gladly plug off my earphone and check the things out.&lt;/p&gt;

&lt;p&gt;I think that for Linux, I can develop a GNOME Shell extension and for KDE as well. For other platforms
the popularity of the software will help to decide whether the software should be ported.&lt;/p&gt;

&lt;p&gt;At the time of writing, I have a bit of experience with Qt framework, but for I find GTK3 more stable over
Qt, it will be my first choice (And I am using Ubuntu 18.10 so it also puts some weight).&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Feb 2019 18:00:00 +0300</pubDate>
        <link>http://velitasali.github.io/idea/2019/02/04/project-focus.html</link>
        <guid isPermaLink="true">http://velitasali.github.io/idea/2019/02/04/project-focus.html</guid>
        
        
        <category>idea</category>
        
      </item>
    
      <item>
        <title>Understanding Artificial Intelligence</title>
        <description>&lt;p&gt;&lt;em&gt;This was a paper for one of the classes I participated. The class was nowhere near computer engineering. Please treat it accordingly. You can sent your thoughts to my e-mail address.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we consider, most of us create problems that we can solve to assert a meaning to life. I am not talking about deeply religious people. I am talking of those who take a large portion of the human society and those are the ones that define the rules of what we live in. Whether it is impossible to apply it to all, we are in need of the knowledge that could help us understand what is going on in our universe and existence. AI holds a new way of understanding in this and, yet people also have many different approaches to the topic. Some believes it should never come to life at all, because it is dangerous and some believes it will cause human to lose their purpose of life. There are also those like me who believe it offers endless opportunities that we can benefit from.
It is a bit disturbing to see how we are directly addressing AI as evil, but to my understanding when we eliminate the fact that human errs and human does evil, it appears that AI is the most beneficial technology that could have ever occurred in the human history. Without replacing humans, an AI can help us develop better machines to accompany us or they can improve the quality of our lives, so that we can finally focus more on it in some respects. Diseases and other unexpected events might still occur, but we still would be able to see a better treatment while curing or fixing them.
It is not a must to put AI in the center of everything and that would be dangerous. Because when we do so, it would be hard to know when its hacked and to be honest, we humans can also be hacked. So to me the right approach would be that they should never be in control or given power at any time. However, I believe that sending them to long missions to collect data would be the most useful of them like sending into a black hole in the space.
Another question that arises is whether AI with a true consciousness supported by chemical reactions to enable it to reflect human feelings would suffer from pain as we do. The development of AI have not taken the shape which we can name as ideal (as it is not successful). So the randomness of living objects which is triggered by chemical reactions could help us develop an AI with feelings. However, if it is the case that this is to involve in the development, then it might force us to question whether the morals of this development should be revised before sending them to deadly missions.
AI does make sense as does the topics it involves in. Our lives are meaningless in a way that we write romantic books or science-fiction or that is the reason we speak different languages. To assert a meaning to live we chose to be not understood. All the songs, movies, drama plays, games (counting video games in) point out one thing and that is we create problems to have a more meaningful lives.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A pause here. There is the fact that there are numerous books written in numerous languages. To help those
make their ways to future generations is dependent on that they are understood, so if all the World did speak
a common language then we might lose the ability to understand them. Unless a language is developed with all the
features that current languages have and all the knowledge is transferred to that new language, we should not do
that.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We define what is good, what is beautiful and nice so that human imperfections could be forgotten for a moment. We do the evil because we are bored and we do the good because it certifies that there is evil and these are meaningful and at the same time non-sense.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is &amp;amp; What is not?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Artificial Intelligence has different definitions and understanding among by whom they are defined. Its definitions are simply endless and has no one specific understanding as the current usage of the term suggests. So it is better not to define but to explain what it actually is.
The Artificial Intelligence with its most known definition is a part of machine that can use its provided hardware in a certain way that it can learn in some aspects and then can judge its environment by using what it has gathered. It is not simply a computer program because it can be dependent on without really interfering the way it works while working. That is why we are seeing “AI-powered” statement on some devices, donating that it can handle some tasks without really expecting a user-input.
There is another definition of it which we know and come across the most and it is applied to the robots that which can speak and behave like human while just leaning on what they had learned and been taught beforehand. This is the most accurate definition because it is simply closer to what they are expected to do in general sense.
AI is not a robot that can handle certain tasks as it is programmed that way. So it would do no harm if we were eliminate Google Assistant or iOS Siri from candidate list for AIs because they simply do what they are able to do which is not more or not less.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Current Understanding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It would not be wrong saying that most people don’t have any expectation from AI other than that they would destroy humanity or leave us behind as being less flawed in existence. However, when it comes to the question why they would destroy us most people say that “because they are smarter than we are.” However, it is a pessimistic and blind approach to what it could bring as they are failing to see what mankind done to itself and the nature before the real arrival of the AI. So in this part, I would like to mention why AI-powered androids cannot or would not easily destroy humanity before leading themselves into some unexpected evolution in terms of their working flow.
AI could destroy humanity if they are not aware what “to destroy” means. You see when we talk about on an AI, we attribute it the ability to judge, learn, speak, think and negotiate, so this means that it can be and is one of us whether it is weaker or stronger. Then it would be a bit funny to expect it to kill us before it chooses to kill itself. What I am trying to get at is that if they are to destroy us, possibly their intention is not to destroy us or they have a too good reason to let us not live or exist on this planet.
I think it would be a good example bringing Marvin from Hitchhiker’s Guide to the Galaxy, an existentialist robot who hates being in existence and curse its creators throughout the story. He knows simply everything and every word coming from his mouth (or speakers) is pessimistic. He is not helpful in any circumstance because he is too much occupied with his thoughts on existence.
The topic of Artificial Intelligence does also bring the expectation of being worthless in possible future because it would take over anything normally a human-being would do and there are a few people discussing what people would do in the age of AI and without really having purpose of living (jobs, work etc.). Elon Musk on the topic, he says, though without really giving an answer to that, admitting that people will be in despair if it is done after the establishment of civilization along with the Artificial Intelligence utilizing the current order. It is a totally acceptable debate on one perspective.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Really Happening?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the age of technology not expecting an arrival from what we call highly intellectual androids (or simply AI-powered devices) would be a mistake. Sophie of 21st century clearly has blown our minds in a way that we had started to wish rather not to have any than to be destroyed. The controversial robot has said enough to scare many with a huge success of being known at the large scale of Earth. She even has an citizenship of Saudi Arabia.
What we nowadays call as “hype”, the popular robot also said “I will destroy humanity,”  in a humorous way. Of course, most believed and highly affected by that statement. Strangely, the one and only robot could be able say that. However, there are also a group who believes that Sophie’s intellect is in fact not real.
Sophie’s development must be a strange one. I have never seen a company having that powerful AI and still showing it off. Here is the problem; an AI is not a toy and it is certainly not a parrot. The term AI suggest super-intelligence and Sophie simply is a toy which is still under development. I think they should have never shown her in the first place or should at least underline the fact that she is unable to think apart from what we expect from an AI.
There are also self-driving cars on production for daily use. They are also known for  AI-paired system which enables them to drive by themselves. When we consider planes, auto-pilot has been there for long, but as being interfered by many blocks cars could not behave like they are flying over the sky. They should see what is in front of them. That’s why they are recently been usable since their development started 5 or so years ago. It is certainly not perfect still and they don’t learn in the way as we know it. They follow patterns and they are still not perfect. Recently Uber’s self driving taxi, which always has a co-human-pilot, has failed to stop before pedestrian and ended up killing her.
Machine-learning is the another area where AI is often referred. It is used while harvesting big data with getting the help of an AI. As an example to this we can take Google Translate, which has recently changed its architecture to what they call “machine learning”. Of course it cannot work without the help humans who provide direct translations, corrections and, then the AI performs an action to pick the suitable word to the given context. Again it is not perfect but works better than the old one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What Should be Expected?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a human-being whether religious or not finding the answer or at least finding better question should be the aim. However, acceptance of the weakness is also an important milestone for us to improve. AI, in this sense, will allow us to reduce miscalculations on the journey of space or while creating new device which could enable us to see further. This can be, for instance, a new microscope. The human error or the capacity is always a limit for us and that should be exceeded in order to reduce time in development or to make it possible. These are the most beneficial outcome of this new technology.
The current development has not come close enough to the point where we can call it dangerous. AI’s possibility of destroying us is completely unavailable information to us. We cannot decide that it is the new threat to our kind. Even if it did, it would not be any worse that what mankind could do to itself. Because an AI under the right circumstances could not be more than a computer program. Giving it control over our lives could only lead that possibility.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Understanding AI and Why We Fail to Develop One?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The true AI has not yet been accomplished. We are just seeing prototypes of those we want to see in the future. Sophie is fake for sure, but the real question is what way of development should be followed in order to have a truly working AI. So in order to discuss on the question, we need to describe some useful understanding of human nature;
  • Randomness
    Our randomness which is just not random but also predictable is our shepherd in daily life. The combination of many different inputs which are our ears, eyes, senses, chemical state of our body and our brain comparing them to the old knowledge (or inputs) make us the person who we are. I am not expert in this, but it does not change the fact that I am a human. What we know as good and bad is coded through this mechanism.
  • Survival Instincts
    We all have it and I believe this might be the reason which caused us to develop languages. When a person gets hungry or its (consider animals also) body senses that it could die, for the environment provides what is beforehand provided as threat, this is triggered. Feeling the pain also has a big impact on this.&lt;/p&gt;

&lt;p&gt;Building an AI should not be any different than raising a baby because only thus it could have a true conscious. A program reading the inputs as does humans or animal can really be improvement. When we look at the nature we see that animals with different shapes act and behave accordingly. So it might be true that to give a certain understanding to the program of life to help it make its way into being a real consciousness. This would make the learning the real learning ability.
I don’t think we will be able to make a program that truly understands us without having such a way of understanding of existence. What I am trying to say is that an AI cannot be created but be taught. That is why all the programs are failing. They don’t actually understand what they are doing or why they are doing. This is the meaning of life to us “having the feeling that we are living” therefore we seek the things that make life easier only when “survival instincts” are triggered.
Randomness is the conditions that could be judged with our knowledge. For example, if I have never been in a desert then I might not know that I will not be able find water in every 200 meters like I normally do, so I might die of lack of water. So this proves two things; one is that I know my need for water and the other is, therefore, the desert is dangerous to me. But if we put Sophie into desert, she would wait until her battery dies. This also proves Sophie is not a real AI and she has not the chemical reaction of pain that her battery is dying therefore she must do something. When she is charging, it will not trigger her hormones level up so that she would not be happy of the process and would not know why she is charging herself in the first place if she is not programmed that way.
I think these are the essential parts of the development of an AI. We can simply call it “providing a reasoning mechanism”.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Feb 2019 18:00:00 +0300</pubDate>
        <link>http://velitasali.github.io/opinion/2019/02/03/understanding-aritificial-intelligence.html</link>
        <guid isPermaLink="true">http://velitasali.github.io/opinion/2019/02/03/understanding-aritificial-intelligence.html</guid>
        
        
        <category>opinion</category>
        
      </item>
    
  </channel>
</rss>
